{
    "data": [{
            "name": "Chess",
            "overview": "This chess project was one that I did in a team.  The goal was to make a fully functional chess program.  This program needed to follow all the rules of chess, meaning, every piece moves exactly as it should.  We also implemented special moves like castling, empassant, and promotion (though in this version you always promote to a queen).  Most of the code we wrote was our own.  The code that was not ours was the interact and Open GL Classes and libraries.  Those were written by James Helfrich, a professor at BYU-I.",
            "projectPic1": "images/chessPic.png",
            "challenges": "While programming this project, we came across some interesting challenges.  The biggest issue we faced was pointers.  In our game, we initialized the board with an array of 64 pointers to 64 objects.    As each piece moved, we had to make sure to swap the pointers.  In the case of a capture, we had to make sure we deleted the pointer that was captured and fill it with a blank piece pointer.  We did this because strange bugs would occur if we did not delete our unused pointers.  Another challenge we faced was figuring out how to make each individual piece move in its own way.  I suggested to the group of using a structure that has each of the possible moves the piece could go.  This structure helped immensely sense we had pieces like the knight that move in L shapes.",
            "projectPic2": "images/chessDesignPic.png",
            "design": "The design of this program was very interesting to do.  The only interesting part of the program was the Piece Class with all of its childrenâ€™s classes.  We tried making the parent class, Piece, handle most of the functions that each of its children would need.  We did have a view virtual function however since certain pieces had certain things it had to do.  For example, each piece had to know how to draw itself.  In the design document, you will see some of the public methods of the parent class implemented again in the child class.  This is mainly just due to the fact we were learning inheritance in C++ and wanted to make sure it was clear that the parent class methods are used by the children.",
            "GitHubLink": "https://github.com/mdowns1999/Chess-Program-Repo"


        },
        {
            "name": "Oribt",
            "overview": "This project is a simulation of satellites orbiting the earth.  This program allows you to fly a ship and destroy floating junk in space.  If a satellite breaks during the game, then it is the players job to go and destroy it before anything else breaks.  This program uses basic physics.  The orbiting of the satellites is not as precise as it could be since we are using simple Algebra and Geometry, but it is close enough that it looks almost like the real thing.",
            "projectPic1": "images/orbitPic.png",
            "challenges": "One of the challenges of this code was figuring out how to get the bullets that are spawned in to spawn away from the ship.  To solve this, our team made the starting position of the bullet the same as the ship.  We then calculated and added velocity to each bullet so that the bullets spawn just far enough away from the ship so they do not collide instantly.",
            "projectPic2": "images/orbitDesignPic.png",
            "design": "Designing this project was very interesting.  We tried utilizing the Satellite Parent class by making it handle most of the work load for the child classes. Specifically, we tried making the parent class handle the general movement of a satellite as well as have general methods that the child classes might use often.",
            "GitHubLink": "https://github.com/mdowns1999/Orbit-Simulator"
        },
        {
            "name": "Lunar Lander",
            "overview": "The Lunar Lander program is a simple game that simulates the Apollo 11 Moon Landing.  The program allows the player to move the Lunar Lander and try to land it on a blue platform on the moons surface.  The player must deal with gravity and a limited amount of fuel to accomplish this task.  This project was done in a team. ",
            "projectPic1": "images/landerPic.png",
            "challenges": "Some of the challenges we faced were implementing dome of the physics of the game.  We had to implement gravity, velocity, acceleration, and other formulas.  The main reason this was difficult was due to the fact that both team members were new to the C++ language and mostly had experience with programming in Python.  Once these problems were overcome, the normal challenges of learning a new language occurred like language syntax.  ",
            "projectPic2": "images/orbitDesignPic.png",
            "design": "The design for this project was fairly straightforward.  We separated each class into its own noun.  We also tried to apply principles of encapsulation like fidelity and abstraction.",
            "GitHubLink": "https://github.com/mickfish1996/LunarModule"
        },

        {
            "name": "Commerce Website",
            "overview": "This website is a mock of a chamber of commerce business in Rexburg.  The purpose of building this website was to practice using HTML, CSS, and JavaScript.  Each of the different pages practices different things relating to JavaScript.  A few of these topics are lazy loading, reading a JSON file, building HTML forms, and using an API.   ",
            "projectPic1": "images/chamberWebsitePic.png",
            "challenges": "One of the main challenges I faced was learning how to read and  use a JSON file on my web page.  Since using JavaScript to fetch it for me was new, I had to research a few things of documentation to understand how the process worked.  Now that it works, I used it to bring in images and also used it to work with my API.",
            "projectPic2": "images/websiteDesign.png",
            "design": "The design of this website was pretty basic.  I mainly used grid to form simple layouts.  The main focus was on practicing and using JavaScript in different ways.  ",
            "GitHubLink": "https://github.com/mdowns1999/wdd230"


        },
        {
            "name": "Data Structures Presentation",
            "overview": "This project is a simple presentation on three kinds of data structures. The purpose of this is to demonstrate my understanding of these data structures and show that I can explain it to another individual. The presentation contains diagrams and explanations about each data structure. I also provided code examples, practice problems, and solutions to those practice problems.",
            "projectPic1": "images/dataStructuresPic.png",
            "challenges": "One challenge I faced with this project was trying to find a simple way to explain each data structure in a basic and simplified way.  How I did this was I relied on using a lot of examples, diagrams, and charts to help make each data structure easy to understand.",
            "projectPic2": "images/dataStructureLayout.png",
            "design": "This project was interesting to design.  I mainly used markdown files with code examples within each example.  I then tried to make it where I provided starting code as well as code solutions to any practice problems I used for each presentation.",
            "GitHubLink": "https://github.com/mdowns1999/data_structures_presentation"
        }

    ]
}